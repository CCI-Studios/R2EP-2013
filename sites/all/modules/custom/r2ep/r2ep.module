<?php

define('R2EP_EVENT_REGISTRATION_BLOCK', 'r2ep_event_registration_block');
define('R2EP_EVENT_COUNTDOWN_BLOCK', 'r2ep_event_countdown_block');
define('R2EP_REGISTRATION_PROGRESS', 'r2ep_registration_progress');
define('R2EP_SHARE_LINK', 'r2ep_share_link');
define('R2EP_CREATE_TEAM_LINK', 'r2ep_create_team_link');
define('R2EP_VIEW_CAMPAIGNS', 'r2ep_view_campaigns');

module_load_include('inc', 'r2ep', 'r2ep.blocks');
module_load_include('inc', 'r2ep', 'r2ep.forms');

// ensure i am the last form alter so i can get at the payment processing fields
function r2ep_module_implements_alter(&$implementations, $hook) {
	if ($hook == 'form_alter') {
		// ordered internally
		$group = $implementations['r2ep'];
    	unset($implementations['r2ep']);
		$implementations['r2ep'] = $group;
	}
}

function r2ep_menu_alter(&$items) {
	$items['search/user']['title'] = 'Runners';
	$items['search/user/%menu_tail']['title'] = 'Runners';
}

function r2ep_entity_update($entity, $type) {
	if ($type == 'node' &&$entity->type == 'campaign') {
		_r2ep_only_one_active($entity);
	}
}

function _r2ep_only_one_active($entity) {
	if (@$entity->field_active_campaign['und'][0]['value'] == 0) {
		return;
	}

	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'campaign')
		->propertyCondition('uid', $entity->uid)
		->propertyCondition('nid', $entity->nid, '<>');
	$results = $query->execute();

	if (isset($results['node'])) {
		$campaigns = array_keys($results['node']);
		$campaigns = node_load_multiple($campaigns);

		foreach($campaigns as $campaign) {
			$campaign->field_active_campaign['und'][0]['value'] = 0;
			node_save($campaign);
		}
	}
}

function r2ep_block_info() {
	$blocks = array();
	$blocks[R2EP_EVENT_REGISTRATION_BLOCK] = array(
		'info' => t('Register For This Event'),
	);
	$blocks[R2EP_EVENT_COUNTDOWN_BLOCK] = array(
		'info' => t('Event countdown'),
	);
	$blocks[R2EP_REGISTRATION_PROGRESS] = array(
		'info' => t('Registration Progress'),
	);
	$blocks[R2EP_SHARE_LINK] = array(
		'info' => t('Share Campaign')
	);
	$blocks[R2EP_CREATE_TEAM_LINK] = array(
		'info' => t('Create Team')
	);
	$blocks[R2EP_VIEW_CAMPAIGNS] = array(
		'info' => t('View Campaigns')
	);

	return $blocks;
}

function r2ep_block_view($delta = '') {
	$block = array();

	switch ($delta) {
		case R2EP_EVENT_REGISTRATION_BLOCK:
			$block['subject'] = t('Register for this event');
			$block['content'] = _r2ep_event_registration_block();
			break;
		case R2EP_EVENT_COUNTDOWN_BLOCK:
			$block['subject'] = t('Event Countdown');
			$block['content'] = _r2ep_event_countdown();
			break;
		case R2EP_REGISTRATION_PROGRESS:
			$block['subject'] = t('Registration Progress');
			$block['content'] = _r2ep_registration_progress();
			break;
		case R2EP_SHARE_LINK:
			$block['subject'] = t('Share Campaign');
			$block['content'] = _r2ep_share_campaign_link();
			break;
		case R2EP_CREATE_TEAM_LINK:
			$block['subject'] = t('Create Team');
			$block['content'] = _r2ep_create_team_link();
			break;
		case R2EP_VIEW_CAMPAIGNS:
			$block['subject'] = t('View Campaign');
			$block['content'] = _r2ep_view_campaign();
			break;
	}

	return $block;
}

function _r2ep_create_team_link() {
	$node = menu_get_object();

	return t('<a class="btn btn--block" href="/node/add/team">Create Team</a>');
}

function _r2ep_share_campaign_link() {
	$node = menu_get_object();
	Global $user;

	if (!isset($node) || !$user) return '';
	if ($user->uid != $node->uid) return '';

	return t('<a class="btn btn--block" href="@url">Send Emails</a>', array('@url' => "/share/{$node->nid}"));
}

function _r2ep_event_registration_block() {
	global $user;
	$node = menu_get_object();

	$date = @$node->field_date['und'][0]['value'];

	// exit if time has passed
	if ($date && $date < time()) {
		return '';
	}

	if ($user->uid == 0) {
		$content = "<div style='padding-top: 10px;'><a href=\"/user/register\"><span class=\"large\">Sign Up</span> Now!</a></div>";
		return $content;
	}

	if ($node->field_registration_form) {
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')
			->entityCondition('bundle', 'campaign')
			->propertyCondition('uid', $user->uid)
			->propertyCondition('status', 1)
			->fieldCondition('field_event', 'target_id', $node->nid);

		$count = clone $query;
		$count = $count->count()->execute();

		if ($count) {
			$query->range(0, 1);
			$results = $query->execute();
			$node = reset($results['node']);
			$link = drupal_get_path_alias('node/'. $node->nid);
			$content = "<div style='padding-top: 10px;'><a href=\"/$link\">View My<br/><span class=\"large\">Campaign</span></a></div>";
		} else {
			$form = $node->field_registration_form['und'][0]['target_id'];
			$link = drupal_get_path_alias("node/$form") .'?eid='. $node->nid;
			$content = "<div><a href=\"/$link\"><span class=\"large\">Register</span><br/>For This Event</a></div>";
		}
	} else {
		$content = '';
	}

	return $content;
}

function _r2ep_event_countdown() {
	$node = menu_get_object();

	if ($node->field_date) {
		$date = $node->field_date['und'][0]['value'];

		$now = time();
		$diff = $date - $now;

		// hide expired countdowns
		if ($diff < 1) {
			return '';
		}

		$days = floor($diff/(60*60*24));
		$hours = floor(($diff - $days*60*60*24)/ (60*60));
		$minutes = floor(($diff - $days*60*60*24 - $hours*60*60)/ (60));
		$seconds = floor($diff - $days*60*60*24 - $hours*60*60 - $minutes*60);

		$content = array(
			'#theme'		=> 'item_list',
			'#items'	=> array(),
			'#attributes'	=> array(
				'class' => array('gridContainer eventCountdown'),
				'data-object' => 'countdown',
				'data-date' => $diff,
				'data-amount' => ($now < $date)? '1':'-1',
			),
			'#attachment' => array(
				'js' => array(
					'data' => drupal_add_js(drupal_get_path('module', 'r2ep'). '/js/countdown.js')
				),
			)
		);

		$content['#items'][] = array(
			'data' => '<div>&nbsp</div>',
			'class' => array('col-1-3'),
		);
		$content['#items'][] = array(
			'data' => '<div class="darkBlock">'. $days .'</div>'. t('days'),
			'class' => array('col-1-3 days'),
		);
		$content['#items'][] = array(
			'data' => '<div>&nbsp</div>',
			'class' => array('col-1-3'),
		);
		$content['#items'][] = array(
			'data' => '<div class="darkBlock">'. $hours .'</div>'. t('hours'),
			'class' => array('col-1-3 clear hours'),
		);
		$content['#items'][] = array(
			'data' => '<div class="darkBlock">'. $minutes .'</div>'. t('minutes'),
			'class' => array('col-1-3 minutes'),
		);
		$content['#items'][] = array(
			'data' => '<div class="darkBlock">'. $seconds .'</div>'. t('seconds'),
			'class' => array('col-1-3 seconds'),
		);

		return $content;
	}

}

function _r2ep_registration_progress() {
	global $user;
	$user_fields = user_load($user->uid);
	$block = array();
	$percent = null;
	$link = null;
	$message = null;

	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'campaign')
		->propertyCondition('status', 1)
		->propertyCondition('uid', $user->uid);
	$campaigns = $query->count()->execute();

	if (!isset($user_fields->field_avatar) ||
		count($user_fields->field_avatar) == 0 ||
		isset($user_fields->field_avatar['und'][0]['is_default'])) {
		$percent = '10%';
		$link = '/user/'.$user->uid.'/edit';
		$message = 'Upload a Photo';
	} else if (!isset($user_fields->field_description) || !$user_fields->field_description['und'][0]['value']) {
		$percent = '30%';
		$link = '/user/'.$user->uid.'/edit';
		$message = 'Upload a Description';
	} else if ($campaigns == 0) {
		$percent = '50%';
		$link = '/events';
		$message = 'Register for an Event';
	} else {
		return '';
	}

	// FIXME
	// add sharing
	// add donating

	$block = "<p>Profile - $percent Complete > <a href=\"". $link. "\">$message</a></p>";
	return $block;
}

function r2ep_node_insert($node) {

	if ($node->type == 'donation') {
		$campaign = @$node->field_campaign['und'][0]['target_id'];
		$team = @$node->field_team['und'][0]['target_id'];
		$event = @$node->field_event['und'][0]['target_id'];

		if ($campaign) {
			$cnode = node_load($campaign);
			node_save($cnode);

			// update user
			$user = user_load($cnode->uid);
			user_save($user);
			// drupal_goto("node/$campaign");
		}

		if ($team) {
			$tnode = node_load($team);
			node_save($tnode);

			// drupal_goto("node/$team");
		}

		if ($event) {
			$enode = node_load($event);
			node_save($enode);

			// drupal_goto("node/$event");
		}
	} else if ($node->type == 'campaign') {
		$user = @$node->uid;

		if ($user) {
			$unode = user_load($user);
			user_save($unode);
		}
	}
}

function r2ep_node_update($node) {

	if ($node->type == 'campaign') {
		$runner_id = $node->uid;

		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')
			->entityCondition('bundle', 'team')
			->fieldCondition('field_runners', 'target_id', array($runner_id), 'IN');
		$results = $query->execute();

		if (isset($results['node'])) {
			$teams = array_keys($results['node']);

			$teams = node_load_multiple($teams);
			foreach($teams as $team) {
				node_save($team);
			}
		}

		$event = @$node->field_event['und'][0]['target_id'];
		if ($event) {
			$enode = node_load($event);
			node_save($enode);
		}
	}
}

// handle form submissions
function r2ep_form_alter(&$form, &$form_state, $form_id) {

	if (!path_is_admin($_GET['q'])) {
		if (isset($form['#node']) &&
			isset($form['#node']->field_r2ep_make_campaign) &&
			$form['#node']->field_r2ep_make_campaign['und'][0]['value']) {
			$form['#submit'][] = '_r2ep_campaign_submitted';
		}

		if (isset($form['#node']) &&
			isset($form['#node']->field_r2ep_make_donation) &&
			$form['#node']->field_r2ep_make_donation['und'][0]['value']) {
			$form['#submit'][] = '_r2ep_donation_submitted';
		}
	}

	if ($form_id == 'campaign_node_form') {
		$form['canned_message'] = array(
			'#type' => 'select',
			'#title' => t('Use one of our themed messages'),
			'#weight' => 3,
			'#after_build' => array('_r2ep_campaign_add_js'),
			'#options' => array(
				'none'	=> t('None'),
				'Belief in Possibility'	=> t('Belief in Possibility'),
				'Running for Change'	=> t('Running for Change'),
				'Running for the Team' => t('Running for the Team'),
				'Outsmarting Poverty with EWB' => t('Outsmarting Poverty with EWB'),
			),
		);
	}

	switch($form_id) {
		case 'webform_client_form_150':
		case 'webform_client_form_124':
			_r2ep_donation_form($form, $form_state, $form_id);
			break;
		case 'views_form_share_campaign_page':
			_r2ep_email_form($form, $form_state, $form_id);
			break;
	}
}

function _r2ep_campaign_add_js($element) {
	drupal_add_js(drupal_get_path('module', 'r2ep'). '/js/r2ep.js');
	return($element);
}

// create a campaign after a users submits a registration form
function _r2ep_campaign_submitted(&$form, &$form_state) {
	global $user;
	$user_fields = user_load($user->uid);

	// map from submission to event_id dynamically
	$event_id = _r2ep_form_value($form['#node'], $form_state, 'event_id');

	$campaign = new stdClass();
	$campaign->title = $user_fields->realname .'\'s '. t('Campaign');
	$campaign->type = 'campaign';
	node_object_prepare($campaign);

	$campaign->language = LANGUAGE_NONE;
	$campaign->uid = $user->uid;
	$campaign->status = 1;
	$campaign->promote = 0;
	$campaign->comment = 1; // off
	$campaign->field_event = array('und' => array(array(
		'target_id' => $event_id
	))); // event_id

	$campaign = node_submit($campaign);
	node_save($campaign);

	drupal_goto('node/'. $campaign->nid .'/edit');
}

function _r2ep_webform_component_mapping($node) {
	$mapping = array();
	$components = $node->webform['components'];

	foreach ($components as $i => $component) {
		$key = $component['form_key'];
		$mapping[$key] = $i;
	}

	return $mapping;
}


// create a donation after a user submits a donation form
function _r2ep_donation_submitted(&$form, &$form_state) {
	$donation = new stdClass();
	$donation->title = 'donation-'. mktime();
	$donation->type = 'donation';
	node_object_prepare($donation);

	$donation->language = LANGUAGE_NONE;
	$donation->uid = 0;
	$donation->status = 1;
	$donation->promote = 0;
	$donation->comment = 1;

	$donation->field_first_name = array('und' => array(array('value' => $form_state['values']['wfbs_first_name'])));
	$donation->field_last_name = array('und' => array(array('value' => $form_state['values']['wfbs_last_name'])));
	$donation->field_contact_email = array('und' => array(array('value' => $form_state['values']['wfbs_email'])));
	$donation->field_contact_phone = array('und' => array(array('value' => $form_state['values']['wfbs_phone'])));
	$donation->field_contact_address1 = array('und' => array(array('value' => $form_state['values']['wfbs_address1'])));
	$donation->field_contact_address2 = array('und' => array(array('value' => $form_state['values']['wfbs_address2'])));
	$donation->field_contact_city = array('und' => array(array('value' => $form_state['values']['wfbs_city'])));
	$donation->field_contact_province = array('und' => array(array('value' => $form_state['values']['wfbs_province'])));
	$donation->field_contact_postal = array('und' => array(array('value' => $form_state['values']['wfbs_postal'])));
	$donation->field_contact_country = array('und' => array(array('value' => $form_state['values']['wfbs_country'])));
	$donation->field_description = array('und' => array(array('value' => $form_state['values']['submitted'][4])));
	$donation->field_anonymous = array('und' => array(array('value' => $form_state['values']['submitted'][5])));

	$form_node = $form['#node'];
	$campaign_id = _r2ep_form_value($form_node, $form_state, 'campaign_id');
	if ($campaign_id) {
		$donation->field_campaign = array('und' => array(array('target_id' => $campaign_id)));
	}
	$team_id = _r2ep_form_value($form_node, $form_state, 'team_id');
	if ($team_id) {
		$donation->field_team = array('und' => array(array('target_id' => $team_id)));
	}
	$event_id = _r2ep_form_value($form_node, $form_state, 'event_id');
	if ($event_id) {
		$donation->field_event = array('und' => array(array('target_id' => $event_id)));
	}

	if (isset($form_state['values']['wfbs_set_price']) && $form_state['values']['wfbs_set_price'] !== 'other') {
		$price = $form_state['values']['wfbs_set_price']; // set a fixed price
	} else if (isset($form_state['values']['wfbs_price'])) {
		$price = $form_state['values']['wfbs_price']; // get value from form
	} else {
		$price = $form['#node']->field_wfbs_price['und'][0]['value']; // get value from node
	}
	$donation->field_wfbs_price = array('und' => array(array('value' => $price)));

	$donation = node_submit($donation);
	node_save($donation);

	// if donating to campaign send notification/email
	if ($campaign_id) {
		$campaign = node_load($campaign_id);
		$user = user_load($campaign->uid);

		$notification = new stdClass();
		$notification->title = "Notification";
		$notification->type = "notification";
		node_object_prepare($notification);
		$notification->language = LANGUAGE_NONE;
		$notification->uid = $campaign->uid;
		$notification->status = 1;
		$notification->promote = 0;
		$notification->comment = 1;
		$notification->field_description = array(
			'und' => array(array(
				'value' => 'You have received a new donation',
			))
		);
		$notification = node_submit($notification);
		node_save($notification);

		$name = $user->realname;
		$donor = $form_state['values']['wfbs_first_name'] .' '. $form_state['values']['wfbs_last_name'];
		$amount = $price;
		$url = url("node/{$campaign_id}", array('absolute' => true));

		$message = <<<HTML
Good news $name,

$donor has donated $amount to your Run to End Poverty campaign!

You've added yet another person to the list of people who support our work, and you've made greater impact possible. That's fantastic news!

You can track all your progress on your campaign page and send $donor a thank you email here: $url

Keep up the great work!
Run to End Poverty - Engineers Without Borders Canada
HTML;

		mail($user->mail, 'You\'ve received a donation!', $message);
	}
}

function _r2ep_form_value($form, $form_state, $field) {
	if (!$form || !$form_state) {
		return;
	}

	$mapping = _r2ep_webform_component_mapping($form);
	$index = isset($mapping[$field])? $mapping[$field] : false;

	if ($index !== false && isset($form_state['values']['submitted'][$index])) {
		return $form_state['values']['submitted'][$index];
	}
}
