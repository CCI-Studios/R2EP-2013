<?php

define('R2EP_EVENT_REGISTRATION_BLOCK', 'r2ep_event_registration_block');
define('R2EP_EVENT_COUNTDOWN_BLOCK', 'r2ep_event_countdown_block');
define('R2EP_REGISTRATION_PROGRESS', 'r2ep_registration_progress');
define('R2EP_SHARE_LINK', 'r2ep_share_link');
define('R2EP_CREATE_TEAM_LINK', 'r2ep_create_team_link');

function r2ep_block_info() {
	$blocks = array();
	$blocks[R2EP_EVENT_REGISTRATION_BLOCK] = array(
		'info' => t('Register For This Event'),
	);
	$blocks[R2EP_EVENT_COUNTDOWN_BLOCK] = array(
		'info' => t('Event countdown'),
	);
	$blocks[R2EP_REGISTRATION_PROGRESS] = array(
		'info' => t('Registration Progress'),
	);
	$blocks[R2EP_SHARE_LINK] = array(
		'info' => t('Share Campaign')
	);
	$blocks[R2EP_CREATE_TEAM_LINK] = array(
		'info' => t('Create Team')
	);

	return $blocks;
}

function r2ep_block_view($delta = '') {
	$block = array();

	switch ($delta) {
		case R2EP_EVENT_REGISTRATION_BLOCK:
			$block['subject'] = t('Register for this event');
			$block['content'] = _r2ep_event_registration_block();
			break;
		case R2EP_EVENT_COUNTDOWN_BLOCK:
			$block['subject'] = t('Event Countdown');
			$block['content'] = _r2ep_event_countdown();
			break;
		case R2EP_REGISTRATION_PROGRESS:
			$block['subject'] = t('Registration Progress');
			$block['content'] = _r2ep_registration_progress();
			break;
		case R2EP_SHARE_LINK:
			$block['subject'] = t('Share Campaign');
			$block['content'] = _r2ep_share_campaign_link();
			break;
		case R2EP_CREATE_TEAM_LINK:
			$block['subject'] = t('Create Team');
			$block['content'] = _r2ep_create_team_link();
	}

	return $block;
}

function _r2ep_create_team_link() {
	$node = menu_get_object();
	if (!$node) return '';

	return t('<a class="btn btn--block" href="/node/add/team?field_event[und][0]='.$node->nid.'">Create Team</a>');
}

function _r2ep_share_campaign_link() {
	$node = menu_get_object();

	if (!isset($node)) return '';

	return t('<a class="btn btn--block" href="@url">Share</a>', array('@url' => "/share/{$node->nid}"));
}

function _r2ep_event_registration_block() {
	global $user;
	$node = menu_get_object();

	if ($node->field_registration_form) {
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')
			->entityCondition('bundle', 'campaign')
			->propertyCondition('uid', $user->uid)
			->propertyCondition('status', 1)
			->fieldCondition('field_event', 'target_id', $node->nid);

		$count = clone $query;
		$count = $count->count()->execute();

		if ($count) {
			$query->range(0, 1);
			$results = $query->execute();
			$node = reset($results['node']);
			$link = drupal_get_path_alias('node/'. $node->nid);
			$content = "<div style='padding-top: 10px;'><a href=\"/$link\">View My<br/><span class=\"large\">Campaign</span></a></div>";
		} else {
			$form = $node->field_registration_form['und'][0]['target_id'];
			$link = drupal_get_path_alias("node/$form") .'?eid='. $node->nid;
			$content = "<div><a href=\"/$link\"><span class=\"large\">Register</span><br/>For This Event</a></div>";
		}
	} else {
		$content = '';
	}

	return $content;
}

function _r2ep_event_countdown() {
	$node = menu_get_object();

	if ($node->field_date) {
		$date = $node->field_date['und'][0]['value'];
		$now = time();

		$diff = abs($now - $date);
		$days = floor($diff/(60*60*24));
		$hours = floor(($diff - $days*60*60*24)/ (60*60));
		$minutes = floor(($diff - $days*60*60*24 - $hours*60*60)/ (60));

		$content = array(
			'#theme'		=> 'item_list',
			'#items'	=> array(),
			'#attributes'	=> array(
				'class' => array('gridContainer eventCountdown'),
			),
		);

		$content['#items'][] = array(
			'data' => '<div class="darkBlock">'. $days .'</div>'. t('days'),
			'class' => array('col-1-3'),
		);
		$content['#items'][] = array(
			'data' => '<div class="darkBlock">'. $hours .'</div>'. t('hours'),
			'class' => array('col-1-3'),
		);
		$content['#items'][] = array(
			'data' => '<div class="darkBlock">'. $minutes .'</div>'. t('minutes'),
			'class' => array('col-1-3'),
		);

		return $content;
	}

}

function _r2ep_registration_progress() {
	global $user;
	$user_fields = user_load($user->uid);
	$block = array();
	$percent = null;
	$link = null;
	$message = null;

	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'campaign')
		->propertyCondition('status', 1)
		->propertyCondition('uid', $user->uid);
	$campaigns = $query->count()->execute();

	if (!isset($user_fields->field_avatar) ||
		count($user_fields->field_avatar) == 0 ||
		isset($user_fields->field_avatar['und'][0]['is_default'])) {
		$percent = '10%';
		$link = '/user/'.$user->uid.'/edit';
		$message = 'Upload a photo';
	} else if (!isset($user_fields->field_description) || !$user_fields->field_description['und'][0]['value']) {
		$percent = '30%';
		$link = '/user/'.$user->uid.'/edit';
		$message = 'Upload a description';
	} else if ($campaigns == 0) {
		$percent = '50%';
		$link = '/events';
		$message = 'Register for an event';
	} else {
		return '';
	}

	// FIXME
	// add sharing
	// add donating

	$block = "<p>You are $percent complete. <a href=\"". $link. "\">$message</a></p>";
	return $block;
}

// computed fields
function computed_field_field_total_donations_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {

	switch ($entity->type) {
		case 'campaign':
			$query = db_select('node', 'n')
				->condition('n.type', 'donation')
				->condition('n.status', 1)
				->condition('c.field_campaign_target_id', $entity->nid);
			$query->join('field_data_field_campaign', 'c', 'c.entity_id = n.nid');
			$query->join('field_data_field_wfbs_price', 'p', 'p.entity_id = n.nid');
			$query->addExpression('sum(p.field_wfbs_price_value)');

			$entity_field[0]['value'] = $query->execute()->fetchField();
			break;
		case 'event':
			$total = 0;

			$query = new EntityFieldQuery();
			$query->entityCondition('entity_type', 'node')
				->entityCondition('bundle', 'campaign')
				->fieldCondition('field_event', 'target_id', $entity->nid);
			$results = $query->execute();

			if (isset($results['node'])) {
				$campaigns = array_keys($results['node']);
				$query = db_select('node', 'n')
					->condition('type', 'donation')
					->condition('c.field_campaign_target_id', $campaigns, 'IN');
				$query->join('field_data_field_campaign', 'c', 'c.entity_id = n.nid');
				$query->join('field_data_field_wfbs_price', 'p', 'p.entity_id = n.nid');
				$query->addExpression('sum(p.field_wfbs_price_value)');

				$total += $query->execute()->fetchField();
			}

			// add any donations made straight to the event
			$query = db_select('node', 'n')
				->condition('n.type', 'donation')
				->condition('n.status', 1)
				->condition('e.field_event_target_id', $entity->nid);
			$query->join('field_data_field_event', 'e', 'e.entity_id = n.nid');
			$query->join('field_data_field_wfbs_price', 'p', 'p.entity_id = n.nid');
			$query->addExpression('sum(p.field_wfbs_price_value)');
			$total += $query->execute()->fetchField();

			$entity_field[0]['value'] = $total;
			break;
		case 'team':
			$total = 0;
			$temp = @$entity->field_runners['und'];
			$runners = array();
			foreach ($temp as $runner) {
				$runners[] = (int)$runner['target_id'];
			}

			// get all campaigns for all team members
			if (count($runners) && isset($entity->field_event) && count($entity->field_event)) {
				$query = new EntityFieldQuery();
				$query->entityCondition('entity_type', 'node')
					->entityCondition('bundle', 'campaign')
					->propertyCondition('uid', $runners, 'IN')
					->fieldCondition('field_event', 'target_id', $entity->field_event['und'][0]['target_id']);
				$results = $query->execute();

				if (isset($results['node'])) {
					$campaigns = array_keys($results['node']);

					// sum all donations made to any of the campaigns
					$query = db_select('node', 'n')
						->condition('n.type', 'donation')
						->condition('n.status', 1)
						->condition('c.field_campaign_target_id', $campaigns, 'IN');
					$query->join('field_data_field_campaign', 'c', 'c.entity_id = n.nid');
					$query->join('field_data_field_wfbs_price', 'p', 'p.entity_id = n.nid');
					$query->addExpression('sum(p.field_wfbs_price_value)');

					$total += $query->execute()->fetchField();
				}
			}

			// add any donations made straight to the team
			$query = db_select('node', 'n')
				->condition('n.type', 'donation')
				->condition('n.status', 1)
				->condition('t.field_team_target_id', $entity->nid);
			$query->join('field_data_field_team', 't', 't.entity_id = n.nid');
			$query->join('field_data_field_wfbs_price', 'p', 'p.entity_id = n.nid');
			$query->addExpression('sum(p.field_wfbs_price_value)');
			$total += $query->execute()->fetchField();
			$entity_field[0]['value'] = $total;
			break;
	}

}

function r2ep_node_insert($node) {

	if ($node->type == 'donation') {
		$campaign = @$node->field_campaign['und'][0]['target_id'];
		$team = @$node->field_team['und'][0]['target_id'];
		$event = @$node->field_event['und'][0]['target_id'];

		if ($campaign) {
			$cnode = node_load($campaign);
			node_object_prepare($cnode);
			node_save($cnode);

			drupal_goto("node/$campaign");
		}

		if ($team) {
			$tnode = node_load($team);
			node_save($tnode);

			drupal_goto("node/$team");
		}

		if ($event) {
			$enode = node_load($event);
			node_save($enode);

			drupal_goto("node/$event");
		}
	}
}

function r2ep_node_update($node) {

	if ($node->type == 'campaign') {
		$runner_id = $node->uid;

		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')
			->entityCondition('bundle', 'team')
			->fieldCondition('field_runners', 'target_id', array($runner_id), 'IN');
		$results = $query->execute();

		if ($results['node']) {
			$teams = array_keys($results['node']);

			$teams = node_load_multiple($teams);
			foreach($teams as $team) {
				node_save($team);
			}
		}

		$event = @$node->field_event['und'][0]['target_id'];
		if ($event) {
			$enode = node_load($event);
			node_save($enode);
		}
	}
}

// handle form submissions
function r2ep_form_alter(&$form, &$form_state, $form_id) {

	if (!path_is_admin($_GET['q'])) {
		if (isset($form['#node']) &&
			isset($form['#node']->field_r2ep_make_campaign) &&
			$form['#node']->field_r2ep_make_campaign['und'][0]['value']) {
			$form['#submit'][] = '_r2ep_campaign_submitted';
		}

		if (isset($form['#node']) &&
			isset($form['#node']->field_r2ep_make_donation) &&
			$form['#node']->field_r2ep_make_donation['und'][0]['value']) {
			$form['#submit'][] = '_r2ep_donation_submitted';
		}
	}

	if ($form_id == 'campaign_node_form') {
		$form['canned_message'] = array(
			'#type' => 'select',
			'#title' => t('Use a canned message'),
			'#weight' => 3,
			'#after_build' => array('_r2ep_campaign_add_js'),
			'#options' => array(
				'none'	=> t('None'),
				'Belief in Possibility'	=> t('Belief in Possibility'),
				'Running for Change'	=> t('Running for Change'),
				'Running for the Team' => t('Running for the Team'),
				'Outsmarting Poverty with EWB' => t('Outsmarting Poverty with EWB'),
			),
		);
	}
}

function _r2ep_campaign_add_js($element) {
	drupal_add_js(drupal_get_path('module', 'r2ep'). '/js/r2ep.js');
	return($element);
}

// create a campaign after a users submits a registration form
function _r2ep_campaign_submitted(&$form, &$form_state) {
	global $user;
	$user_fields = user_load($user->uid);

	$campaign = new stdClass();
	$campaign->title = $user_fields->realname .'\'s '. t('Campaign');
	$campaign->type = 'campaign';
	node_object_prepare($campaign);

	$campaign->language = LANGUAGE_NONE;
	$campaign->uid = $user->uid;
	$campaign->status = 1;
	$campaign->promote = 0;
	$campaign->comment = 1; // off
	$campaign->field_event = array('und' => array(array(
		'target_id' => $form_state['values']['submitted'][4]
	))); // event_id

	$campaign = node_submit($campaign);
	node_save($campaign);

	drupal_goto('node/'. $campaign->nid .'/edit');
}

function _r2ep_webform_component_mapping($node) {
	$mapping = array();
	$components = $node->webform['components'];

	foreach ($components as $i => $component) {
		$key = $component['form_key'];
		$mapping[$key] = $i;
	}

	return $mapping;
}


// create a donation after a user submits a donation form
function _r2ep_donation_submitted(&$form, &$form_state) {
	$donation = new stdClass();
	$donation->title = 'donation-'. mktime();
	$donation->type = 'donation';
	node_object_prepare($donation);

	$donation->language = LANGUAGE_NONE;
	$donation->uid = 0;
	$donation->status = 1;
	$donation->promote = 0;
	$donation->comment = 1;

	$donation->field_first_name = array('und' => array(array('value' => $form_state['values']['wfbs_first_name'])));
	$donation->field_last_name = array('und' => array(array('value' => $form_state['values']['wfbs_last_name'])));
	$donation->field_contact_email = array('und' => array(array('value' => $form_state['values']['wfbs_email'])));
	$donation->field_contact_phone = array('und' => array(array('value' => $form_state['values']['wfbs_phone'])));
	$donation->field_contact_address1 = array('und' => array(array('value' => $form_state['values']['wfbs_address1'])));
	$donation->field_contact_address2 = array('und' => array(array('value' => $form_state['values']['wfbs_address2'])));
	$donation->field_contact_city = array('und' => array(array('value' => $form_state['values']['wfbs_city'])));
	$donation->field_contact_province = array('und' => array(array('value' => $form_state['values']['wfbs_province'])));
	$donation->field_contact_postal = array('und' => array(array('value' => $form_state['values']['wfbs_postal'])));
	$donation->field_contact_country = array('und' => array(array('value' => $form_state['values']['wfbs_country'])));

	$form_node = $form['#node'];
	$campaign_id = _r2ep_form_value($form_node, $form_state, 'campaign_id');
	if ($campaign_id) {
		$donation->field_campaign = array('und' => array(array('target_id' => $campaign_id)));
	}
	$team_id = _r2ep_form_value($form_node, $form_state, 'team_id');
	if ($team_id) {
		$donation->field_team = array('und' => array(array('target_id' => $team_id)));
	}
	$event_id = _r2ep_form_value($form_node, $form_state, 'event_id');
	if ($event_id) {
		$donation->field_event = array('und' => array(array('target_id' => $event_id)));
	}

	if (isset($form_state['values']['wfbs_price'])) {
		$price = $form_state['values']['wfbs_price']; // get value from form
	} else {
		$price = $form['#node']->field_wfbs_price['und'][0]['value']; // get value from node
	}
	$donation->field_wfbs_price = array('und' => array(array('value' => $price)));

	$donation = node_submit($donation);
	node_save($donation);
}

function _r2ep_form_value($form, $form_state, $field) {
	if (!$form || !$form_state) {
		return;
	}

	$mapping = _r2ep_webform_component_mapping($form);
	$index = isset($mapping[$field])? $mapping[$field] : false;

	if ($index !== false && isset($form_state['values']['submitted'][$index])) {
		return $form_state['values']['submitted'][$index];
	}
}
